#!/usr/bin/env python3
"""
Test pentru noul sistem IFC Background Converter
"""

import sys
import os
import time
sys.path.append('python')

from ifc_background_converter import create_background_converter, process_xdata_for_element
import json

def test_background_converter():
    print('🧪 TEST IFC BACKGROUND CONVERTER')
    print('=' * 50)
    
    # Încarcă datele de test
    with open('test_background_ifc_mapping.json', 'r', encoding='utf-8') as f:
        test_elements = json.load(f)
    
    print(f'📊 Elemente de test încărcate: {len(test_elements)}')
    
    # Creează converterul
    converter = create_background_converter("Test Background IFC")
    
    # Adaugă elementele în coadă
    for element in test_elements:
        # Procesează XDATA înainte de conversie
        processed_element = process_xdata_for_element(element)
        
        # Afișează diferența dacă XDATA a fost aplicată
        if '_opening_area_calculated' in processed_element:
            original_lateral = element.get('lateral_area', 0)
            adjusted_lateral = processed_element.get('lateral_area', 0)
            opening_area = processed_element.get('_opening_area_calculated', 0)
            print(f'🔧 XDATA procesată pentru {element["mesh_name"]}:')
            print(f'   Original lateral_area: {original_lateral}')
            print(f'   Opening_area calculată: {opening_area}')
            print(f'   Lateral_area ajustată: {adjusted_lateral}')
        
        converter.queue_element_for_conversion(processed_element)
        print(f'✅ Adăugat în coadă: {element["mesh_name"]} (layer: {element["layer"]})')
    
    # Pornește conversia în background
    output_ifc = 'test_background_auto.ifc'
    print(f'\n🚀 Pornire conversie în background către: {output_ifc}')
    converter.start_background_conversion(output_ifc)
    
    print('\n⏳ Aștept finalizarea conversiei...')
    start_time = time.time()
    
    # Așteaptă finalizarea cu timeout
    success = converter.wait_for_completion(timeout=30.0)
    
    elapsed = time.time() - start_time
    
    if success:
        print(f'✅ Conversia s-a finalizat cu succes în {elapsed:.2f} secunde!')
        
        # Verifică dacă fișierul a fost creat
        if os.path.exists(output_ifc):
            file_size = os.path.getsize(output_ifc)
            print(f'📁 Fișier IFC creat: {output_ifc} ({file_size} bytes)')
            
            # Verifică conținutul cu ifcopenshell
            try:
                import ifcopenshell
                model = ifcopenshell.open(output_ifc)
                
                # Numără elementele
                walls = model.by_type('IfcWall')
                columns = model.by_type('IfcColumn')
                spaces = model.by_type('IfcSpace')
                proxies = model.by_type('IfcProxy')
                
                print(f'\n📊 CONȚINUT IFC GENERAT:')
                print(f'   IfcWall: {len(walls)}')
                print(f'   IfcColumn: {len(columns)}')
                print(f'   IfcSpace: {len(spaces)}')
                print(f'   IfcProxy: {len(proxies)}')
                
                # Verifică XDATA pentru IfcSpace
                for space in spaces:
                    space_name = space.Name
                    print(f'\n🏠 {space_name}:')
                    
                    for rel in space.IsDefinedBy:
                        if hasattr(rel, 'RelatingPropertyDefinition'):
                            pset = rel.RelatingPropertyDefinition
                            if hasattr(pset, 'Name') and pset.Name == 'AutoGeneratedProperties':
                                for prop in pset.HasProperties:
                                    if prop.Name == 'LateralArea':
                                        lateral_area = prop.NominalValue.wrappedValue
                                        print(f'   📊 Lateral Area: {lateral_area} m²')
                                        
                                        # Pentru spațiul cu XDATA
                                        if space_name == 'Space_LivingRoom_1':
                                            expected = 54.0 - (1.2*2.1 + 0.8*2.0)  # 54.0 - 4.12 = 49.88
                                            print(f'   🔧 XDATA aplicată: 54.0 - {1.2*2.1 + 0.8*2.0} = {expected:.2f}')
                                            if abs(lateral_area - expected) < 0.1:
                                                print(f'   ✅ XDATA corect aplicată!')
                                            else:
                                                print(f'   ❌ XDATA incorect: {lateral_area} != {expected:.2f}')
                                    elif prop.Name == 'OpeningAreaDeducted':
                                        opening_area = prop.NominalValue.wrappedValue
                                        print(f'   🔧 Opening Area dedusă: {opening_area} m²')
                
                print(f'\n🎉 TESTUL IFC BACKGROUND CONVERTER A FOST FINALIZAT CU SUCCES!')
                
            except ImportError:
                print('⚠️ ifcopenshell nu este disponibil pentru verificarea conținutului')
            except Exception as e:
                print(f'❌ Eroare la verificarea IFC: {e}')
                
        else:
            print(f'❌ Fișierul IFC nu a fost creat: {output_ifc}')
    else:
        print(f'❌ Conversia a eșuat sau a depășit timeout-ul de 30 secunde')
    
    return success

if __name__ == '__main__':
    test_background_converter()